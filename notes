Note: a lot of things are in examples, not written here

clang complier
    COMPILE:
    clang++ -std=c++11 -stdlib=libc++ example.cpp -o example_program
    RUN:
    ./example_program

    compiling with clang++ example.cpp -o example_program //works for the Hello world example

/////////////////


using namespace std
    then instead of std::cout, you can do just cout


Identifiers:
alignas
alignof
and
and_eq
asm
auto
bitand
bitor
bool
break
case
catch
char
char16_t
char32_t
class
compl
const
constexpr
const_cast
continue
decltype
default
delete
do
double
dynamic_cast
else
enum
explicit
export
extern
false
float
for
friend
goto
if
inline
intlong
mutable
namespace
new
noexcept
not
not_eq
nullptr
operator
or
or_eq
private
protected
public
register
reinterpret_cast
return
short
signed
sizeof
static
static_assert
static_cast
struct
switch
template
this
thread_local
throw
true
try
typedef
typeid
typename
union
unisgned
usingvirtual
void
volatile
wchar_t
while
xor
xor_eq


Important ones:
    char - 8+ bit
    char16_t - 16+_bit
    char32_t - 32+ bit
    wchar_t - "largest supported character set"
    signed char - 8+ bit
    signed short int - at least 16 bits
    signed int, at lest 16 bits
    signed long int, at least 32 bits
    signed long long int, at least 64 bits

    unsigned [char, short int, int, long int, long long int]

    float
    dobule
    long double

    bool
    void (no storage?)
    decltype(nullptr) null pointer

    2**bitsize - max value

initing
    normal int a, b;
    constructor int x (92);
    uniform: int x {92};


strings must be imported.... #include <string>
end; ends line


/////contsnats////


suffix | type
u U unsigned
l L long
ll LL long long
//
f F float
l L long double
//
eg:
75u
33ll
33ul
44lu

3.14159L
6.02e23f

chars
'z' //character (single quotes)
"hi" //string (double quotes)

escape codes
n newline
r returnt tab
v vert tab
b backspace
f form feed
a alert (beep!!! (idk why this is so amusing to me))
'
"
?
\


make strings go together
"like this"  "and stuff"
"and even this will work"   "and this too (tab)"


//char prefixes
u char16_t
U char32_t
L wchar_t

u8 //utf8 string literal
R //raw string (doesn't care about escaping )


true
false
int* p = nullptr; // nullptr = null pointer value


//////constant expressions

const double pi = 3.1415926;

preprocessor definitions

#define PI 3.14159//not type checked

///operatores...

same old stuff

y = 2 + (x=5) //works (if x and y are defined)
y  = z = x= 6546; //works


standard + - * / %

+= -= /= *=
x *= a + b; == x = x * (a+b)


++x; == x++1;

++x, before, x++, after

=- !- < > <= >=

! && ||


condition ? true : false


bitwise operators

&//and
|//or
^//xor
~//not
<<shl
>>shr

int i;
i = (int)someFloat;//truncate

sizeof (<something>) //how many bytes

//precedence

don't feel like writing that all out http://www.cplusplus.com/doc/tutorial/operators/



////////////////I/o///////////////

cin std input
cout std output
cerr std error
clog std logging

<< is called the insertion operator
you can chain insertion operators

endl flushes output, \n does not
int a;
cin >> a

int a;
int b;

cin >> a;
cin >> b;
//or
cin >> a >> b;


for strings, cin must be single word

use: getline(cin,assignVar)

string stream #include <sstream>
