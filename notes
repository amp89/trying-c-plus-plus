Note: a lot of things are in examples, not written here

clang complier
    COMPILE:
    clang++ -std=c++11 -stdlib=libc++ example.cpp -o example_program
    RUN:
    ./example_program

    compiling with clang++ example.cpp -o example_program //works for the Hello world example

/////////////////


using namespace std
    then instead of std::cout, you can do just cout


Identifiers:
alignas
alignof
and
and_eq
asm
auto
bitand
bitor
bool
break
case
catch
char
char16_t
char32_t
class
compl
const
constexpr
const_cast
continue
decltype
default
delete
do
double
dynamic_cast
else
enum
explicit
export
extern
false
float
for
friend
goto
if
inline
intlong
mutable
namespace
new
noexcept
not
not_eq
nullptr
operator
or
or_eq
private
protected
public
register
reinterpret_cast
return
short
signed
sizeof
static
static_assert
static_cast
struct
switch
template
this
thread_local
throw
true
try
typedef
typeid
typename
union
unisgned
usingvirtual
void
volatile
wchar_t
while
xor
xor_eq


Important ones:
    char - 8+ bit
    char16_t - 16+_bit
    char32_t - 32+ bit
    wchar_t - "largest supported character set"
    signed char - 8+ bit
    signed short int - at least 16 bits
    signed int, at lest 16 bits
    signed long int, at least 32 bits
    signed long long int, at least 64 bits

    unsigned [char, short int, int, long int, long long int]

    float
    dobule
    long double

    bool
    void (no storage?)
    decltype(nullptr) null pointer

    2**bitsize - max value

initing
    normal int a, b;
    constructor int x (92);
    uniform: int x {92};


strings must be imported.... #include <string>
end; ends line


/////contsnats////


suffix | type
u U unsigned
l L long
ll LL long long
//
f F float
l L long double
//
eg:
75u
33ll
33ul
44lu

3.14159L
6.02e23f

chars
'z' //character (single quotes)
"hi" //string (double quotes)

escape codes
n newline
r returnt tab
v vert tab
b backspace
f form feed
a alert (beep!!! (idk why this is so amusing to me))
'
"
?
\


make strings go together
"like this"  "and stuff"
"and even this will work"   "and this too (tab)"


//char prefixes
u char16_t
U char32_t
L wchar_t

u8 //utf8 string literal
R //raw string (doesn't care about escaping )


true
false
int* p = nullptr; // nullptr = null pointer value


//////constant expressions

const double pi = 3.1415926;

preprocessor definitions

#define PI 3.14159//not type checked

///operatores...

same old stuff

y = 2 + (x=5) //works (if x and y are defined)
y  = z = x= 6546; //works


standard + - * / %

+= -= /= *=
x *= a + b; == x = x * (a+b)


++x; == x++1;

++x, before, x++, after

=- !- < > <= >=

! && ||


condition ? true : false


bitwise operators

&//and
|//or
^//xor
~//not
<<shl
>>shr

int i;
i = (int)someFloat;//truncate

sizeof (<something>) //how many bytes

//precedence

don't feel like writing that all out http://www.cplusplus.com/doc/tutorial/operators/



////////////////I/o///////////////

cin std input
cout std output
cerr std error
clog std logging

<< is called the insertion operator
you can chain insertion operators

endl flushes output, \n does not
int a;
cin >> a

int a;
int b;

cin >> a;
cin >> b;
//or
cin >> a >> b;


for strings, cin must be single word

use: getline(cin,assignVar)

string stream #include <sstream>

/////////////// flow control n stuff /////////////

same old crap

if (whatever)
  whatever; // 1 line

if (whatever){
  whatever;
}

if ()
    whatever
else if ()
    whatever
else
    whatever

while (whatever){
    whatever

}


do {} while (stuff);

for (int whatever;condition,increment){}

! cool thing

for(int i = 0, int j = 0;  i<100; ++i,++j){stuff}

//range based loop


for (char c : "HeYyY")
  {
    do stuff with c
  }

//also
for (auto c: ...


///jumps

break;
continue;


mylabel:
goto mylabel;

//switch

switch (expression of some sort){
    case someConstantExpression://
      somethings;
      break; //(prevents fallthrough)
    default:
      do default things
}


///// funcitons

..same old crap

type name (identifier param, ...){function stuff}


!!!!! pass by reference / pass by value difference

void somePassByRefStuff(int& aRef, int bCopy){
    blah blah blah...

}


reference is faster than copy

string concatStuff(const string& a, const string& b) << can access but not modify

///////////////////inline functions///////////////////

marking a function "inline" puts the function at the part of the code where it is


inline string doStuff(){return "stuff"}

compiles whatever doStuff does inline when compiled

most compilers do this anyways?

/////defaults////////

int doThings(int a, int b = 2)
{}
call like this:
doThings(1) or doThings(1,2)

////////////prototypes/////////////

if you need to declare before defining (must be declared before calling, in code btw)

int iAmDeclaredButNotDefined (void);
int iAmDeclaredButNotDefined (int hi, int bye);
int iAmDeclaredButNotDefined (int, int);

//////////////recursive


long factorial(long a){
    if (a > 1)
        return (a * factorial ( a-1));
    else
        return 1;
}





/////////////overloading


can NOT be done by return type

compiler looks at argument types


int doCrap(int a, int b)
{
    cout << 'int doing crap' << endl;
    return a*b
}

double doCrap(double a, double b)
{
    cout << 'double doing crap' << endl;
    return a*b
}

calling with double, would do the 2nd one


////////////function templates


tempalte <class SomeType>
SomeType sum (SomeType a, SomeType b)
{
    do sometype stuff!
}

called:

name<type>(args...)

or

name(args...)


<template <class A, B> works too,
same way to call
fnName<atype,btype>(args...)





non template type argumenhts
cannot be passed at runtime
template <class WHATEVER, int CONSTANT>


scope

globals declared outside of function

block scopes, kinda like java


/////namespaceing

namespace someNamespaceIMade
{
   int a, b;
}

accessed within namespace normally
accessed outside someNamespaceIMade::a....
kinda like std::cout



sidenote: endl is std namespace


//////////storage classes

static storage - globals, not explicity init - init to zero
auto storage - locals, not exlicitly inited - init to some weird stuffNumber


////////////////arrays


int someIntArr [10] // an array len 10
int someIntArr [3] = {234,2134,345}


inints to zeros if there are blanks

can assume size

int someIntArr [] = {123,123,123,123,123,12,213,312,321}
compiler will put the size at however many things i put in there but i'm too lazy to count rn


you can do this too

int someIntArr[] = {234,234,243,4}
int someIntArr[] {234,234,243,4} //same


access is standard

miltidimensional arrays work in a standard way



using arrays as parameters
     liek:    int arg[]
              int arg[][3][4]


////////////////array container library



#include<int,3> somearr {12,124,135};



//////////////////////////character sequences


char stuff[] = {'H','e','y','\0'};

\0, null, end

char stuff[] = "Hey"; //auto appends \0

null terminated char sequence, not string object

string size is dynamic

null terminated char seq can be converted to string (implicit)

strings > null terminated chars, someStringObj.c_str(); //orsomeStrObj.c_str();


//////////////////pointers cpp

& address of operator
* dereference operator

variable address
addr = &variable;


dereference operator

valVar = *addr //assigns value of variable at addr to valVar


//// declaring pointser


type * name

type of data pointer points to
name of pointer

* in this case is not a dereference, it is part of the pointer declaration

int * somePointer = &someVariable

int* is pointer to intint * p1, * p2;

if you did int * p1, p2, p2 would be an int and p1 would be an int pointer

////////////arrays and pointers
int someArray [2];
int * somePointer;


somePointer = someArray; //array is kinda like pointer.  somePointer can be reassigne

offset operator
int * arraypointer;
arraypointer (arrayObject+5)  points to location of arrayObject[5]


///////////// pointer arithmetic


+  and -


when ++ , points to the following element of the same type

(look at picture http://www.cplusplus.com/doc/tutorial/pointers/)


*pointer++ and *(pointer++)  // derefrence value, then increment pointer
*++pointer *(++pointer) //increment pointer, then dereference value
++*p or ++(*p) / increment value, dereference pointer
(*p)++ // dereference pointer,  increment value


// const pointers

cont int * pointerToSomeInt // can't change value of int it points to, but they can change the int that they point to
const int * const whatever = whatever poitner treats the thing you're pointing to as a constant (even if its not)


// pointers with string literals

const char * charPointer = "hey"

h e y \0

charPointer[2] // 'y'
*(charPointer+1) // 'y'


//pointers to pointers

int a = 1;
int * x = &a;
int ** y = &x;
int ***z = &y;


//void pointers

no types
points to any data type
must be put into correct pointer type before dereferencing



void * pointer;


//null pointers and invalid stuff


pointing towards out of bound indexes


NULL works too


///////////////////////function pointers


returntype (*functionpointer)(argtype,argtype)
int addStuff(int a, int b){blahblahblah}

int (*addStuffPointer)(int,int) = addStuff;

int res = (*addStuffPointer)(1,2);








































#
